<<<<<<< HEAD
// File: /src/components/XPSystem/XPSystem.js
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { Box, LinearProgress, Typography, Dialog, DialogTitle, DialogContent, DialogActions, Button, DialogContentText } from '@mui/material'; // âœ… ImportaÃ§Ã£o de DialogContentText

const XPSystem = ({ xpData }) => {
  const [level, setLevel] = useState(xpData.level);
  const [currentXP, setCurrentXP] = useState(xpData.currentXP);
  const [xpToNextLevel, setXPToNextLevel] = useState(1000 - xpData.currentXP); // XP necessÃ¡rios para o prÃ³ximo nÃ­vel
  const [progress, setProgress] = useState(xpData.currentXP / 1000 * 100);
  const [rewardDialogOpen, setRewardDialogOpen] = useState(false); // Estado para controlar o dialog de recompensa
  const [rewardMessage, setRewardMessage] = useState(''); // Estado para a mensagem de recompensa

  // Mensagens de recompensa possÃ­veis
  const rewardMessages = [
    "ParabÃ©ns! Subiste de nÃ­vel!",
    "Novo nÃ­vel alcanÃ§ado, continue assim!",
    "Excelente! O teu esforÃ§o estÃ¡ a dar frutos!",
    "NÃ­vel Up! Mais um passo rumo ao sucesso!",
    "FantÃ¡stico! MantÃ©m o ritmo!"
  ];

  useEffect(() => {
    setLevel(xpData.level);
    setCurrentXP(xpData.currentXP);
    setXPToNextLevel(1000 - xpData.currentXP);
    setProgress(xpData.currentXP / 1000 * 100);

    // Verificar se subiu de nÃ­vel e mostrar recompensa
    if (xpData.level > level) {
      const randomMessage = rewardMessages[Math.floor(Math.random() * rewardMessages.length)];
      setRewardMessage(randomMessage);
      setRewardDialogOpen(true);
    }
  }, [xpData, level, rewardMessages]); // âœ… Adicionado rewardMessages como dependÃªncia

  const handleCloseRewardDialog = () => {
    setRewardDialogOpen(false);
  };

  return (
    <Box sx={{ width: '100%', marginBottom: 2, textAlign: 'center', padding: 2, backgroundColor: 'background.paper', borderRadius: 2 }}>
      <Typography variant="subtitle2" color="text.secondary">
        NÃ­vel {level}
      </Typography>
      <LinearProgress variant="determinate" value={progress} sx={{ mb: 1 }} />
      <Typography variant="body2">
        XP: {currentXP} / {level * 1000} (Faltam {xpToNextLevel} XP para o nÃ­vel {level + 1})
      </Typography>

      {/* Dialog de Recompensa */}
      <Dialog
        open={rewardDialogOpen}
        onClose={handleCloseRewardDialog}
        aria-labelledby="recompensa-dialog-title"
        aria-describedby="recompensa-dialog-description"
      >
        <DialogTitle id="recompensa-dialog-title">
          ParabÃ©ns!
        </DialogTitle>
        <DialogContent>
          <DialogContentText id="recompensa-dialog-description">  {/* âœ… DialogContentText agora reconhecido */}
            {rewardMessage} ðŸŽ‰
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseRewardDialog} color="primary" autoFocus>
            Fechar
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

XPSystem.propTypes = {
  xpData: PropTypes.shape({
    currentXP: PropTypes.number.isRequired,
    totalXP: PropTypes.number.isRequired,
    level: PropTypes.number.isRequired
  }).isRequired,
};
=======
import React, { useEffect } from 'react'; // Importa useEffect
import { Box, LinearProgress, Typography, keyframes, styled } from '@mui/material';
import EmojiEventsIcon from '@mui/icons-material/EmojiEvents';

const pulse = keyframes`
Â  0% { transform: scale(1); }
Â  50% { transform: scale(1.2); }
Â  100% { transform: scale(1); }
`;

const ProgressBar = styled(LinearProgress)(({ theme }) => ({
Â  height: 20,
Â  borderRadius: 10,
Â  backgroundColor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)',
Â  '& .MuiLinearProgress-bar': {
Â  Â  borderRadius: 10,
Â  Â  background: `linear-gradient(90deg, ${theme.palette.primary.main} 0%, ${theme.palette.secondary.main} 100%)`,
Â  }
}));

const XPSystem = ({ xpData, onLevelUp }) => { // Adiciona onLevelUp como prop
Â  const currentLevel = xpData.level;
Â  const previousLevel = currentLevel - 1;
Â  const xpForNextLevel = currentLevel * 1000;
Â  const progress = (xpData.totalXP % 1000) / 10;

Â  // Efeito para detetar level up
Â  useEffect(() => {
Â  Â  if (xpData.level > previousLevel && previousLevel >= 1) { // Verifica se o nÃ­vel aumentou e nÃ£o Ã© o nÃ­vel inicial
Â  Â  Â  if (onLevelUp) {
Â  Â  Â  Â  onLevelUp(xpData.level); // Chama a funÃ§Ã£o onLevelUp e passa o novo nÃ­vel
Â  Â  Â  }
Â  Â  }
Â  }, [xpData.level, previousLevel, onLevelUp]);

Â  return (
Â  Â  <Box sx={{ mb: 4, p: 3, bgcolor: 'background.paper', borderRadius: 3, boxShadow: 1 }}>
Â  Â  Â  <Typography variant="h5" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
Â  Â  Â  Â  <EmojiEventsIcon sx={{ color: 'gold' }} />
Â  Â  Â  Â  NÃ­vel {currentLevel} | XP Total: {xpData.totalXP}
Â  Â  Â  </Typography>

Â  Â  Â  <ProgressBar
Â  Â  Â  Â  variant="determinate"
Â  Â  Â  Â  value={progress}
Â  Â  Â  Â  sx={{
Â  Â  Â  Â  Â  '& .MuiLinearProgress-bar': {
Â  Â  Â  Â  Â  Â  animation: `${pulse} 1s ease-in-out`,
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }}
Â  Â  Â  />

Â  Â  Â  <Typography variant="body2" sx={{ mt: 1, textAlign: 'right' }}>
Â  Â  Â  Â  PrÃ³ximo nÃ­vel em: {xpForNextLevel - (xpData.totalXP % xpForNextLevel)} XP
Â  Â  Â  </Typography>
Â  Â  </Box>
Â  );
};

// XPSystem.propTypes = { // PropTypes removidos para simplificar a demonstraÃ§Ã£o
// Â  xpData: PropTypes.shape({...}).isRequired,
// Â  onLevelUp: PropTypes.func
// };
>>>>>>> a927fb649594659651e28ac2ff9dbef30f1ec777

export default XPSystem;